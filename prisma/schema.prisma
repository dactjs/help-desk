generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  name     String

  status UserStatus @default(ENABLED)
  role   UserRole   @default(USER)

  tickets         Ticket[]        @relation("Tickets")
  assignedTickets Ticket[]        @relation("AssignedTickets")
  ticketComments  TicketComment[]

  ticketTraces                  TicketTrace[]
  destinationUserOnTicketTraces TicketTrace[] @relation("DestinationUserOnTicketTrace")
  originUserOnTicketTraces      TicketTrace[] @relation("OriginUserOnTicketTrace")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  ENABLED
  DISABLED
}

enum UserRole {
  ADMIN
  TECHNICIAN
  USER
}

model Ticket {
  id       String  @id @default(uuid())
  issue    String
  solution String?

  status TicketStatus @default(UNASSIGNED)

  traces   TicketTrace[]
  comments TicketComment[]

  service   TicketService @relation(fields: [serviceId], references: [id], onDelete: Restrict)
  serviceId String

  sentBy   User   @relation("Tickets", fields: [sentById], references: [id], onDelete: Restrict)
  sentById String

  assignedTo   User?   @relation("AssignedTickets", fields: [assignedToId], references: [id], onDelete: Restrict)
  assignedToId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketStatus {
  UNASSIGNED
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

model TicketService {
  id   String @id @default(uuid())
  name String

  tickets Ticket[]

  category   TicketServiceCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, categoryId])
}

model TicketServiceCategory {
  id   String @id @default(uuid())
  name String @unique

  services TicketService[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TicketTrace {
  id   String          @id @default(uuid())
  type TicketTraceType

  origin   User?   @relation("OriginUserOnTicketTrace", fields: [originId], references: [id])
  originId String?

  destination   User?   @relation("DestinationUserOnTicketTrace", fields: [destinationId], references: [id])
  destinationId String?

  madeBy   User   @relation(fields: [madeById], references: [id], onDelete: Restrict)
  madeById String

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Restrict)
  ticketId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TicketTraceType {
  RECEPTION
  ASSIGNMENT
  TRANSFER
  OPENED
  RESOLVED
  CLOSED
  CANCELLED
}

model TicketComment {
  id      String @id @default(uuid())
  content String

  writtenBy   User   @relation(fields: [writtenById], references: [id], onDelete: Restrict)
  writtenById String

  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
